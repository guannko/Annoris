// frontend/lib/autosave.ts
type Opts = {
  getText: () => string;              // –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
  meta?: Record<string, any>;
  token: string;                      // AUTH_TOKEN
  url?: string;                       // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /autosave
  userId?: string;                    // "boris" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –±—ç–∫–µ
  intervalMs?: number;                // 60_000
  idleMs?: number;                    // 3000
  minDelta?: number;                  // 200  (–º–∏–Ω–∏–º—É–º –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
};

export function startAutosave(opts: Opts) {
  const url = opts.url ?? "/autosave";
  const intervalMs = opts.intervalMs ?? 60_000;
  const idleMs = opts.idleMs ?? 3000;
  const minDelta = opts.minDelta ?? 200;

  let lastSaved = "";
  let tIdle: any;
  let tInterval: any;
  let inFlight = false;
  let abort: AbortController | null = null;

  async function save(reason: string) {
    const text = opts.getText();
    if (inFlight) return;
    if (text.length - lastSaved.length < minDelta && text === lastSaved) return;

    inFlight = true;
    abort?.abort();
    abort = new AbortController();
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${opts.token}`,
        },
        body: JSON.stringify({ 
          text, 
          token: opts.token,  // Also include in body for fallback
          userId: opts.userId,
          meta: { ...opts.meta, reason } 
        }),
        signal: abort.signal,
      });
      if (res.ok) {
        lastSaved = text;
        console.log(`‚úÖ Autosaved: reason=${reason}`);
      } else if (res.status === 429) {
        console.warn("‚è±Ô∏è Rate limited, will retry on next trigger");
      }
    } catch (err: any) {
      if (err.name !== 'AbortError') {
        console.warn(`‚ùå Autosave failed (${reason}):`, err.message);
      }
      /* –º–æ–ª—á–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä */
    } finally {
      inFlight = false;
    }
  }

  function scheduleIdle(reason: string) {
    clearTimeout(tIdle);
    tIdle = setTimeout(() => save(reason), idleMs);
  }

  function onChange() { 
    scheduleIdle("idle-debounce"); 
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤–≤–æ–¥–∞
  tInterval = setInterval(() => save("interval"), intervalMs);

  // –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤–∫–ª–∞–¥–∫–∏ (beacon —Å —Ç–æ–∫–µ–Ω–æ–º –≤ body)
  function beforeUnload() {
    const text = opts.getText();
    if (text && text !== lastSaved) {
      // navigator.sendBeacon –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, 
      // –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –≤ body
      const sent = navigator.sendBeacon?.(
        url,
        new Blob([JSON.stringify({ 
          text, 
          token: opts.token,  // TOKEN –í BODY –¥–ª—è beacon!
          userId: opts.userId,
          meta: { ...opts.meta, reason: "beforeunload" } 
        })], { type: "application/json" })
      );
      
      if (sent) {
        console.log("üö™ Beacon autosave sent on unload");
      } else {
        // Fallback to sync XHR (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π, –Ω–æ –Ω–∞–¥—ë–∂–Ω—ã–π)
        try {
          const xhr = new XMLHttpRequest();
          xhr.open("POST", url, false); // false = sync
          xhr.setRequestHeader("Content-Type", "application/json");
          xhr.send(JSON.stringify({
            text,
            token: opts.token,
            userId: opts.userId,
            meta: { ...opts.meta, reason: "beforeunload-sync" }
          }));
        } catch {
          // Last resort failed
        }
      }
    }
  }
  
  window.addEventListener("beforeunload", beforeUnload);
  document.addEventListener("visibilitychange", () => {
    if (document.hidden) beforeUnload();
  });

  // Initial save on start
  save("initial");

  return {
    onChange,                   // –¥–µ—Ä–≥–∞–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    save: () => save("manual"), // —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    stop() {
      clearTimeout(tIdle);
      clearInterval(tInterval);
      window.removeEventListener("beforeunload", beforeUnload);
      document.removeEventListener("visibilitychange", beforeUnload);
      abort?.abort();
    }
  };
}